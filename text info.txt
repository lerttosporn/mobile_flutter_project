jsonDecode() ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô:

Map<String, dynamic> ‡∏ñ‡πâ‡∏≤ JSON ‡πÄ‡∏õ‡πá‡∏ô object ({})

List<dynamic> ‡∏ñ‡πâ‡∏≤ JSON ‡πÄ‡∏õ‡πá‡∏ô array ([])

-------------------------------------------------------------------------------------------
jsonEncode()	‡πÅ‡∏õ‡∏•‡∏á Dart object ‚Üí JSON string	‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API
jsonDecode()	‡πÅ‡∏õ‡∏•‡∏á JSON string ‚Üí Dart object	‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API

-------------------------------------------------------------------------------------------
SharedPreferences ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö local storage ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏ó‡∏µ‡πà Flutter ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£ (persistent) ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô:

Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á login ‚úÖ

‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢ login ‡πÑ‡∏´‡∏° ‚úÖ

‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏ä‡πà‡∏ô dark mode, ‡∏†‡∏≤‡∏©‡∏≤ ‚úÖ

‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô primitive type ‡πÄ‡∏ä‡πà‡∏ô String, int, bool, double, List<String>

‚úÖ1. ‡∏Å‡∏≤‡∏£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
final prefs = await SharedPreferences.getInstance();
await prefs.setString('token', 'abc.def.ghi');
await prefs.setBool('isLoggedIn', true);

‚úÖ 2. ‡∏Å‡∏≤‡∏£ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
final prefs = await SharedPreferences.getInstance();
String? token = prefs.getString('token');
bool? isLoggedIn = prefs.getBool('isLoggedIn');

‚úÖ 3. ‡∏Å‡∏≤‡∏£ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
final prefs = await SharedPreferences.getInstance();
await prefs.remove('token'); // ‡∏•‡∏ö token

‚úÖ 4. ‡∏Å‡∏≤‡∏£ ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
await prefs.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å key ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
-------------------------------------------------------------------------------------------
üì¶ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡∏´‡∏•‡∏±‡∏á login								|
Future<void> saveToken(String token) async {						|
  final prefs = await SharedPreferences.getInstance();                                  |
  await prefs.setString('token', token);                                                |
}

Future<String?> getToken() async {
  final prefs = await SharedPreferences.getInstance();
  return prefs.getString('token');
}

-------------------------------------------------------------------------------------------
‡πÉ‡∏ä‡πâ‡πÉ‡∏ô CallAPI ‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:

Future<Map<String, dynamic>> loginApi(data) async {
  final response = await http.post(
    Uri.parse('${baseURLAPI}/auth/login'),
    headers: {'Content-Type': 'application/json'},
    body: jsonEncode(data),
  );

  final body = jsonDecode(response.body);
                                                                                          |
  if (body['token'] != null) {                                                            |
    await saveToken(body['token']);                                                       |
  }                                                                                       |
                          		                                                  |
  return body;                                                                            |
}                                                                                         |
-------------------------------------------------------------------------------------------
‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î:
Navigator.pushNamedAndRemoveUntil(
  context,
  AppRouter.dashboard,
  (route) => false,
);

üß† ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∑‡∏≠:

‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ AppRouter.dashboard

‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ)

‚ùì ‡πÅ‡∏•‡πâ‡∏ß (route) => false ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
‚úÖ ‡πÄ‡∏õ‡πá‡∏ô ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏ô ‡∏Ñ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡πÑ‡∏ß‡πâ
(Route<dynamic> route) => false;

‚ùó ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô false ‡∏ï‡∏•‡∏≠‡∏î:

‡∏°‡∏±‡∏ô‡∏à‡∏∞ ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô navigation stack

‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢ ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á push ‡πÑ‡∏õ (‡∏Ñ‡∏∑‡∏≠ dashboard)

üîÑ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö:
Navigator.of(context).pushNamedAndRemoveUntil(
  '/dashboard',
  (route) => false, // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á
);

üìå ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á:
‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡πÉ‡∏ä‡πâ (route) => false

‡∏´‡∏•‡∏±‡∏á Login/Register ‡πÄ‡∏™‡∏£‡πá‡∏à ‚Üí ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ user ‡∏Å‡∏î back ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ

‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡∏•‡∏±‡∏á logout ‚Üí ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤ dashboard ‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î

Navigator.pushNamedAndRemoveUntil(
  context,
  AppRouter.login,
  (route) => false,
);

‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å "‡∏Ñ‡∏á‡∏ö‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏ß‡πâ" ‡∏•‡πà‡∏∞?
Navigator.pushNamedAndRemoveUntil(
  context,
  '/dashboard',
  ModalRoute.withName('/home'),
);


üëâ ‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡∏à‡∏ô‡πÄ‡∏à‡∏≠‡∏´‡∏ô‡πâ‡∏≤ /home ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏ö

üß† ‡∏™‡∏£‡∏∏‡∏õ:
‡πÇ‡∏Ñ‡πâ‡∏î	‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
(route) => false	‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å stack
(route) => true	‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏î‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå)
ModalRoute.withName('/home')	‡∏•‡∏ö‡∏à‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤ /home
